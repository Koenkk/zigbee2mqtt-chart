---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ include "zigbee2mqtt.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "zigbee2mqtt.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "zigbee2mqtt.fullname" . }}
  template:
    metadata:
      annotations:
        checksum/configuration: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        {{- include "zigbee2mqtt.labels" . | nindent 8 }}
        app: {{ include "zigbee2mqtt.fullname" . }}
    spec:
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.image.imagePullSecrets | indent 8 }}
      {{- end }}
      dnsPolicy: {{ .Values.statefulset.dnsPolicy }}
{{- with .Values.statefulset.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
      nodeSelector:
{{- with .Values.statefulset.nodeSelector }}
{{ toYaml . | indent 8 }}
{{- end }}
      {{- with .Values.statefulset.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- with .Values.statefulset.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      containers:
        - name: zigbee2mqtt
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- with .Values.statefulset.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.statefulset.command }}
          command:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: Z2M_ONBOARD_NO_SERVER
              value: "1"
            - name: TZ
              value: {{ .Values.zigbee2mqtt.timezone }}
          ports:
            - containerPort: {{ .Values.zigbee2mqtt.frontend.port }}
              name: web
              protocol: TCP
          {{- with .Values.statefulset.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- with .Values.statefulset.volumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
            - mountPath: /app/data/configmap-configuration.yaml
              name: config-volume
              subPath: configuration.yaml
            {{- if .Values.statefulset.secrets.name }}
            - mountPath: /app/data/secret.yaml
              name: secrets-volume
              subPath: secret.yaml
            {{- end }}
            - mountPath: /app/data/
              name: data-volume
          resources: {{- toYaml .Values.statefulset.resources | nindent 12 }}
      initContainers:
        - name: yq
          ## hardcoding here the image. It will be either available in z2m or it will be added to config.
          ## not creating entries config yet so users don't couple with it, causing migration issues.
          image: "{{ .Values.secretesMigratorContainer.repository }}:{{ .Values.secretesMigratorContainer.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ "/bin/sh" ]
          workingDir: "/app/data"
          {{- with .Values.secretesMigratorContainer.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ## this scripts copies all the data from the configmap to configuration.yaml (except the version)
          ## and then copies the version from the configmap if it does not (already) exist in configuration.yaml
          args:
            - -c
            - |
              if [ -f configuration.yaml ]
              then
                echo "Backing up existing configuration file to /app/data/configuration-helm-backup.yaml"
                cp configuration.yaml configuration-helm-backup.yaml
              else
                echo "configuration.yaml does not exists, creating one from config map /app/data/configmap-configuration.yaml"
                cp configmap-configuration.yaml configuration.yaml
              fi

              yq --inplace '. *= load("configmap-configuration.yaml") | del(.version) ' configuration.yaml
              yq eval-all  '. as $item ireduce ({}; . * $item )' configmap-configuration.yaml configuration.yaml > configuration.yaml
          volumeMounts:
            - mountPath: /app/data/
              name: data-volume
            - mountPath: /app/data/configmap-configuration.yaml
              name: config-volume
              subPath: configuration.yaml
      volumes:
      {{- with .Values.statefulset.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
        - name: config-volume
          configMap:
            name: {{ include "zigbee2mqtt.fullname" . }}
        {{- if .Values.statefulset.secrets.name }}
        - name: secrets-volume
          secret:
            secretName: {{ .Values.statefulset.secrets.name }}
        {{- end }}
        {{- if not .Values.statefulset.storage.enabled }}
        - name: data-volume
          emptyDir: { }
        {{- end }}
  {{- if .Values.statefulset.storage.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data-volume
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.statefulset.storage.storageClassName }}
      {{- if .Values.statefulset.storage.existingVolume }}
      volumeName: {{ .Values.statefulset.storage.existingVolume }}
      {{- end }}
      {{- if or .Values.statefulset.storage.matchLabels (.Values.statefulset.storage.matchExpressions) }}
      selector:
      {{- if .Values.statefulset.storage.matchLabels }}
        matchLabels:
        {{ toYaml .Values.statefulset.storage.matchLabels | indent 8 }}
      {{- end -}}
      {{- if .Values.statefulset.storage.matchExpressions }}
        matchExpressions:
          {{ toYaml .Values.statefulset.storage.matchExpressions | indent 8 }}
        {{- end -}}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.statefulset.storage.size }}
  {{- end }}
